from gym.envs.registration import register
from gym.spaces import Box

import gym_malware
from ray import tune
from gym_malware.envs.utils import interface, pefeatures
from gym_malware.envs.utils.models import MalConvModel, EmberModel_2019
 

import numpy as np
np.random.seed(123)

sha256_train, sha256_test = interface.get_train_test_sha256()

# EMBER features observation state
def convert_to_ember_os(bytez):
    return np.array(pefeatures.PEFeatureExtractor().feature_vector(bytez))

# RAW bytes observation state
RAW_num_bytes = 10000 
def convert_to_bytes_os(bytez):
    half_num = int(RAW_num_bytes/2)
    b = np.zeros((RAW_num_bytes,), dtype=np.uint8)

    bytez_front = np.frombuffer(bytez[: half_num], dtype=np.uint8)
    bytez_rear = np.frombuffer(bytez[-half_num :], dtype=np.uint8)

    b[: len(bytez_front)] = bytez_front
    b[-len(bytez_rear) :] = bytez_rear

    #b = np.zeros((RAW_num_bytes,), dtype=np.uint8)

    #bytez = np.frombuffer(bytez[: RAW_num_bytes], dtype=np.uint8)

    #b[: len(bytez)] = bytez

    return b

EMBER_OS = {
    'observation_space': Box(low = -np.inf, high = np.inf, shape = (2381,), dtype = np.float32),
    'convert_function': convert_to_ember_os
}

BYTES_OS = {
    'observation_space': Box(low = 0, high = 256, shape = (RAW_num_bytes,), dtype = np.int16),
    'convert_function': convert_to_bytes_os
}

# !!! replace samples folder and rename envs !!!

MAXTURNS = 50 

train_params = {'maxturns': MAXTURNS, 
                'sha256list': sha256_train,
                'save_evaded': False}
                 
test_params = {'maxturns': MAXTURNS, 
               'sha256list': sha256_test,
               'save_evaded': False}
               

########## Target model Ember_2019, agent raw bytes (1024) feature space ##########
malware_train_ember_v0 = {'name': 'malware-train-ember-v0',
                          'label_function': EmberModel_2019().get_label,
                          'config_os': BYTES_OS}
               
malware_test_ember_v0 = {'name': 'malware-test-ember-v0',
                         'label_function': EmberModel_2019().get_label,
                         'config_os': BYTES_OS}               
               
register(
    id='malware-train-ember-v0',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**train_params, **malware_train_ember_v0}}
)

tune.registry.register_env('malware-train-ember-v0', lambda config: gym_malware.envs.MalwareEnv({**train_params, **malware_train_ember_v0}))

register(
    id='malware-test-ember-v0',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**test_params, **malware_test_ember_v0}}
)

# Register ENV so that it can be used in Ray Tune
tune.registry.register_env('malware-test-ember-v0', lambda config: gym_malware.envs.MalwareEnv({**test_params, **malware_test_ember_v0}))

########## Target model EMBER, agent EMBER feature space ##########
malware_train_ember_v2 = {'name': 'malware-train-ember-v2',
                          'label_function': EmberModel_2019().get_label,
                          'config_os': EMBER_OS}
               
malware_test_ember_v2 = {'name': 'malware-test-ember-v2',
                         'label_function': EmberModel_2019().get_label,
                         'config_os': EMBER_OS}               

register(
    id='malware-train-ember-v2',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**train_params, **malware_train_ember_v2}}
)

tune.registry.register_env('malware-train-ember-v2', lambda config: gym_malware.envs.MalwareEnv({**train_params, **malware_train_ember_v2}))

register(
    id='malware-test-ember-v2',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**test_params, **malware_test_ember_v2}}
)

tune.registry.register_env('malware-test-ember-v2', lambda config: gym_malware.envs.MalwareEnv({**test_params, **malware_test_ember_v2}))

########## Target model MalConv, agent EMBER feature space ##########
malware_train_malconv_v0 = {'name': 'malware-train-malconv-v0',
                          'label_function': MalConvModel().get_label,
                          'config_os': EMBER_OS}
               
malware_test_malconv_v0 = {'name': 'malware-test-malconv-v0',
                         'label_function': MalConvModel().get_label,
                         'config_os': EMBER_OS}               


register(
    id='malware-train-malconv-v0',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**train_params, **malware_train_malconv_v0}}
)

tune.registry.register_env('malware-train-malconv-v0', lambda config: gym_malware.envs.MalwareEnv({**train_params, **malware_train_malconv_v0}))

register(
    id='malware-test-malconv-v0',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**test_params, **malware_test_malconv_v0}}
)

tune.registry.register_env('malware-test-malconv-v0', lambda config: gym_malware.envs.MalwareEnv({**test_params, **malware_test_malconv_v0}))

########## Target model MalConv, agent raw bytes (1024) feature space ##########
malware_train_malconv_v2 = {'name': 'malware-train-malconv-v2',
                          'label_function': MalConvModel().get_label,
                          'config_os': BYTES_OS}
               
malware_test_malconv_v2 = {'name': 'malware-test-malconv-v2',
                         'label_function': MalConvModel().get_label,
                         'config_os': BYTES_OS}               


register(
    id='malware-train-malconv-v2',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**train_params, **malware_train_malconv_v2}}
)

tune.registry.register_env('malware-train-malconv-v2', lambda config: gym_malware.envs.MalwareEnv({**train_params, **malware_train_malconv_v2}))

register(
    id='malware-test-malconv-v2',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**test_params, **malware_test_malconv_v2}}
)

tune.registry.register_env('malware-test-malconv-v2', lambda config: gym_malware.envs.MalwareEnv({**test_params, **malware_test_malconv_v2}))




CONFIGS = [
    malware_train_ember_v0,
    malware_test_ember_v0,
    malware_train_ember_v2,
    malware_test_ember_v2,
    malware_train_malconv_v0,
    malware_test_malconv_v0,
    malware_train_malconv_v2,
    malware_test_malconv_v2,
]

def get_config(name): 
    for config in CONFIGS:
        if config['name'] == name:
            return config

    return None

"""
UNCOMMENT if you want to use mixture (both malware and benign samples) setup
########## Target model Ember_2019, agent EMBER feature space ##########
malware_train_ember_v2 = {'name': 'malware-train-ember-v2',
                          'label_function': EmberModel_2019().get_label,
                          'config_os': EMBER_OS}
               
malware_test_ember_v2 = {'name': 'malware-test-ember-v2',
                         'label_function': EmberModel_2019().get_label,
                         'config_os': EMBER_OS}               



register(
    id='mixture-train-ember-v2',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**train_params, **malware_train_ember_v2}}
)

tune.registry.register_env('mixture-train-ember-v2', lambda config: gym_malware.envs.MalwareEnv({**train_params, **malware_train_ember_v2}))

register(
    id='mixture-test-ember-v2',
    entry_point='gym_malware.envs:MalwareEnv',
    kwargs={'env_config': {**test_params, **malware_test_ember_v2}}
)

tune.registry.register_env('mixture-test-ember-v2', lambda config: gym_malware.envs.MalwareEnv({**test_params, **malware_test_ember_v2}))

"""


### Scores not used

"""
register(
    id='mixture-score-v0',
    entry_point='gym_malware.envs:MalwareScoreEnv',
    kwargs={'random_sample': True, 'maxturns': MAXTURNS, 'sha256list': sha256_train}
)

register(
    id='mixture-score-test-v0',
    entry_point='gym_malware.envs:MalwareScoreEnv',
    kwargs={'random_sample': False, 'maxturns': MAXTURNS, 'sha256list': sha256_test}
)
"""

