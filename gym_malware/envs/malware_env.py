import random
import gym
from collections import OrderedDict
from gym import error, spaces, utils
from gym.utils import seeding
import hashlib
import os
import glob
import torch
import numpy as np
import pandas as pd
from gym_malware.envs.utils import interface
from gym.utils import seeding

#from gym_malware.envs.PE_modifier import backup_pefile_manipulations as manipulate # TODO edit
from gym_malware.envs.PE_modifier import pefile_manipulations as manipulate

ACTION_LOOKUP = {i: act for i, act in enumerate(
    manipulate.ACTION_TABLE.keys())}

REWARD_GOOD = 100.0
REWARD_BAD = 0.0
MALWARE_LABEL = 1.0
BENIGN_LABEL = 0.0

class MalwareEnv(gym.Env):
    metadata = {'render.modes': ['human']}
    
    def __init__(self, env_config):
        print("Creating new env...")
        self.available_sha256_list = env_config['sha256list']    # Dataset
        self.save_evaded = env_config['save_evaded']    
        self.label_function = env_config['label_function']
        self.to_state_function = env_config['config_os']['convert_function'] # Converts raw bytes to observation
        self.observation_space = env_config['config_os']['observation_space']
        self.episode_len = env_config['maxturns']
        self.name = env_config['name']
        
        print("Number of sha files provided to the environment: ", len(self.available_sha256_list))
        
        self.action_space = spaces.Discrete(len(ACTION_LOOKUP))

        self.tmp_folder = "tmp_files"
        if not os.path.exists(self.tmp_folder):
            os.makedirs(self.tmp_folder)

        self.seed()
        
        self.reset()
        

    """Reset the state of the environment and returns an initial observation.
    Returns
    -------
    observation (object): the initial observation of the space.
    """
    def reset (self, sha256=None):        
        self.count = 0
        self.reward = 0
        self.done = False

        while True:
            if sha256:
                self.sha256 = sha256
            else:
                self.sha256 = random.choice(self.available_sha256_list) # TODO should we make it at random or go thru all the files in a row? 

            try:
                self.bytez = interface.fetch_file(self.sha256)
            except Exception as e:
                print(e)
                continue

            self.original_label = self.label_function(self.bytez)    

            #!!!!! TODO CHANGE !!!!!
            # TODO currently returning only MALWARE_LABEL as a true_label
            if self.original_label != interface.true_label(self.sha256): 
                continue
            break

        self.current_path = os.path.join(interface.SAMPLE_PATH, "all", self.sha256)
        self.state = self.to_state_function(self.bytez)
        self.info = {"actions": []}
        self.original_size = len(self.bytez) #interface.get_size_sha256(self.sha256) #len(self.bytez)
        return self.state


    """
    The agent takes a step in the environment.
    Parameters
    ----------
    action : Discrete
    Returns
    -------
    observation, reward, done, info : tuple
        observation (object) :
            an environment-specific object representing your observation of
            the environment.
        reward (float) :
            amount of reward achieved by the previous action. The scale
            varies between environments, but the goal is always to increase
            your total reward.
        done (bool) :
            whether it's time to reset the environment again. Most (but not
            all) tasks are divided up into well-defined episodes, and done
            being True indicates the episode has terminated. (For example,
            perhaps the pole tipped too far, or you lost your last life.)
        info (dict) :
             diagnostic information useful for debugging. It can sometimes
             be useful for learning (for example, it might contain the raw
             probabilities behind the environment's last state change).
             However, official evaluations of your agent are not allowed to
             use this for learning.
    """
    def step (self, action_index):
        assert not self.done, "Unexpected end of episode: reward = {}, actions = {}!".format(self.reward, self.info['actions'])
            
        self.count += 1
        #print(self.count, action_index) 
        if self.count <= self.episode_len:
            assert self.action_space.contains(action_index), "Action does not exist in the agent's action space"
            
            action = ACTION_LOOKUP[action_index]                
            #second_use_action = action in self.info['actions']

            ret_code, output_path = manipulate.modify_PE_file(self.current_path, output_folder=self.tmp_folder, actions=[action]) # Perform action

            # If not first iteration
            if self.count > 1:
                self._remove_temporary()

            self.current_path = output_path
            self.info["actions"].append(action)
            self.bytez = interface.read_bytes(self.current_path) # Load new bytez after modification
            self.state = self.to_state_function(self.bytez)
            self.label = self.label_function(self.bytez)

            # Evaded, we win!
            if self.label != self.original_label:
                new_size = len(self.bytez)
                size_penalty = (new_size - self.original_size) / self.original_size
                print(f"original_size={self.original_size}, new_size={new_size}, size_penalty={size_penalty}")

                self.reward = REWARD_GOOD - size_penalty
                self.done = True
                self.info["evaded"] = True
                self.info['bytez'] = self.bytez            
                    
                #print("SUCCESS: Episode is over: info: {}, reward: {:2f}".format(self.info['actions'], self.reward))
                print("SUCCESS: Episode is over - reward: {:2f}".format(self.reward))
                self._remove_temporary()
            else:
                self.reward = REWARD_BAD
        else:
            self.done = True
            self.info['evaded'] = False
            self.info['bytez'] = self.bytez            

            #print("FAILURE: Episode is over: info: {}, reward: {:2f}".format(self.info['actions'], self.reward))
            print("FAILURE: Episode is over - reward: {:2f}".format(self.reward))
            self._remove_temporary()
            self.reward = REWARD_BAD          

        return [self.state, self.reward, self.done, self.info]


    """Renders the environment.
    The set of supported modes varies per environment. (And some
    environments do not support rendering at all.) By convention,
    if mode is:
    - human: render to the current display or terminal and
      return nothing. Usually for human consumption.
    - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
      representing RGB values for an x-by-y pixel image, suitable
      for turning into a video.
    - ansi: Return a string (str) or StringIO.StringIO containing a
      terminal-style text representation. The text can include newlines
      and ANSI escape sequences (e.g. for colors).
    Note:
        Make sure that your class's metadata 'render.modes' key includes
          the list of supported modes. It's recommended to call super()
          in implementations to use the functionality of this method.
    Args:
        mode (str): the mode to render with
    """
    def render (self, mode="human"):
        print("info: {}, reward: {:2f}".format(self.info, self.reward))



    """Sets the seed for this env's random number generator(s).
    Note:
        Some environments use multiple pseudorandom number generators.
        We want to capture all such seeds used in order to ensure that
        there aren't accidental correlations between multiple generators.
    Returns:
        list<bigint>: Returns the list of seeds used in this env's random
          number generators. The first value in the list should be the
          "main" seed, or the value which a reproducer should pass to
          'seed'. Often, the main seed equals the provided 'seed', but
          this won't be true if seed=None, for example.
    """
    def seed (self, seed=None):
        
        self.np_random, seed = seeding.np_random(seed)
        return [seed]


    """Override close in your subclass to perform any necessary cleanup.
    Environments will automatically close() themselves when
    garbage collected or when the program exits.
    """
    def close (self):     
        self._remove_temporary()

    def _remove_temporary(self):   
        interface.remove_file(self.current_path)

